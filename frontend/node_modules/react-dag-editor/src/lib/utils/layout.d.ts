import type { OrderedMap } from "../collections";
import type { ICanvasGroup } from "../models/canvas";
import type { IGraphConfig, INodeConfig } from "../models/config/types";
import type { ICanvasNode } from "../models/node";
import type { NodeModel } from "../models/NodeModel";
/**
 * @param rectConfig
 * @param rect
 */
export declare function getRectWidth<T>(rectConfig: INodeConfig<T> | undefined, rect: Partial<ICanvasNode<T>>): number;
/**
 * @param rectConfig
 * @param rect
 */
export declare function getRectHeight<T>(rectConfig: INodeConfig<T> | undefined, rect: Partial<ICanvasNode<T>>): number;
export interface INodeRect {
    height: number;
    width: number;
}
/**
 * get node height and width by graphConfig
 *
 * @param node the node to get the size
 * @param graphConfig type IGraphConfig
 */
export declare function getNodeSize(node: ICanvasNode, graphConfig: IGraphConfig): INodeRect;
export interface IShapePosition {
    x: number;
    y: number;
}
export interface IShapeRect extends INodeRect, IShapePosition {
}
/**
 * @param group
 * @param nodes
 * @param graphConfig
 */
export declare function getGroupRect<NodeData, PortData>(group: ICanvasGroup, nodes: OrderedMap<string, NodeModel<NodeData, PortData>>, graphConfig: IGraphConfig): IShapeRect;
