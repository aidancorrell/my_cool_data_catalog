import type * as React from "react";
import type { HashMap, OrderedMap } from "../collections";
import type { IGraphConfig } from "../models/config/types";
import type { ICanvasEdge } from "../models/edge";
import type { EdgeModel } from "../models/EdgeModel";
import { Direction, IContainerRect, IGap, IPoint, IRectShape, IRectSize, ITransformMatrix, IViewport } from "../models/geometry";
import type { GraphModel } from "../models/GraphModel";
import type { ICanvasNode } from "../models/node";
import type { NodeModel } from "../models/NodeModel";
import type { IGraphSettings } from "../models/state";
import { IShapeRect } from "./layout";
export declare const isViewportComplete: (viewport: IViewport) => viewport is Required<IViewport>;
export declare const isViewportEmpty: (viewport: IViewport) => boolean;
export declare const getNodeRect: (node: ICanvasNode, graphConfig: IGraphConfig) => IShapeRect;
export declare const isNodeVisible: (node: ICanvasNode, viewport: Required<IViewport>, graphConfig: IGraphConfig) => boolean;
export declare const isRectVisible: (shapeRect: IShapeRect, viewport: Required<IViewport>) => boolean;
export declare const isPointVisible: (point: IPoint, viewport: Required<IViewport>) => boolean;
export declare const getVisibleNodes: <NodeData, PortData>(nodes: OrderedMap<string, NodeModel<NodeData, PortData>>, viewport: Required<IViewport>, graphConfig: IGraphConfig) => ICanvasNode[];
export declare const getRenderedNodes: <NodeData, PortData>(nodes: OrderedMap<string, NodeModel<NodeData, PortData>>, viewport: IViewport) => ICanvasNode[];
export declare const getRenderedEdges: (edges: HashMap<string, EdgeModel>, nodes: OrderedMap<string, NodeModel>, graphConfig: IGraphConfig, viewport: IViewport) => ICanvasEdge<unknown>[];
export declare const getVisibleArea: (viewport: IViewport) => IRectShape;
export declare const getRenderedArea: (viewport: IViewport) => IRectShape;
export declare const getEdgeSourceTargetCoordinate: (edge: ICanvasEdge, nodes: OrderedMap<string, NodeModel>, graphConfig: IGraphConfig) => {
    source?: IPoint;
    target?: IPoint;
};
export interface IZoomCommonParams {
    nodeMinVisibleSize: IRectSize;
    nodeMaxVisibleSize: IRectSize;
}
export interface IZoomFixPublicParams {
    /**
     * zoom vertical
     */
    direction?: Direction;
    /**
     * is disable pan when zoom
     */
    disablePan?: boolean;
    spacing?: number | IGap;
}
export interface IZoomFitParams extends IZoomFixPublicParams, IZoomCommonParams {
    data: GraphModel;
    graphConfig: IGraphConfig;
    rect: IContainerRect;
}
type Action = (viewport: IViewport) => IViewport;
/**
 * @param scale the scale to zoom to
 * @param anchor this client point is not moved after zoom
 * @param direction X: zoom horizontal, Y: zoom vertical
 */
export interface IZoomParams {
    scale: number;
    anchor: IPoint;
    direction?: Direction;
    limitScale(scale: number): number;
}
/**
 * zoom to [scale]
 */
export declare const zoomTo: ({ scale, anchor, direction, limitScale, }: IZoomParams) => Action;
export declare const zoom: ({ scale, anchor, direction, limitScale, }: IZoomParams) => Action;
export declare const pan: (dx: number, dy: number) => Action;
export declare const minimapPan: (dx: number, dy: number) => Action;
export declare const getContentArea: (data: GraphModel, graphConfig: IGraphConfig, nodeIds?: Set<string>) => {
    minNodeWidth: number;
    minNodeHeight: number;
    minNodeX: number;
    minNodeY: number;
    maxNodeX: number;
    maxNodeY: number;
};
export declare const getScaleRange: (params: IZoomCommonParams, { width: minNodeWidth, height: minNodeHeight }: IRectSize) => {
    minScaleX: number;
    minScaleY: number;
    maxScaleX: number;
    maxScaleY: number;
};
export declare const getZoomFitMatrix: (args: IZoomFitParams) => ITransformMatrix;
export declare const focusArea: (minX: number, minY: number, maxX: number, maxY: number, viewport: Required<IViewport>) => IViewport;
export declare const getContainer: (svgRef: React.RefObject<SVGSVGElement>) => HTMLDivElement | null | undefined;
/**
 * @param rectRef
 */
export declare function getContainerCenter(rectRef: React.RefObject<IContainerRect | undefined>): IPoint | undefined;
/**
 * @param rect
 * @param e
 */
export declare function getRelativePoint(rect: IContainerRect, e: MouseEvent): IPoint;
export declare const scrollIntoView: (x: number, y: number, rect: IContainerRect | undefined | null, alwaysScroll?: boolean, position?: IPoint) => Action;
export declare const getScaleLimit: (data: GraphModel, settings: IGraphSettings) => number;
export {};
