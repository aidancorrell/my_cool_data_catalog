import type * as React from "react";
import type { HashMapBuilder } from "../collections";
import type { ICanvasData } from "../models/canvas";
import type { IGetConnectableParams, IGraphConfig } from "../models/config/types";
import type { ICanvasEdge } from "../models/edge";
import type { EdgeModel } from "../models/EdgeModel";
import type { IViewport } from "../models/geometry";
import type { GraphModel } from "../models/GraphModel";
import type { ICanvasNode } from "../models/node";
import type { NodeModel } from "../models/NodeModel";
import type { ICanvasPort } from "../models/port";
export type TDataPatch<NodeData, EdgeData, PortData> = (data: GraphModel<NodeData, EdgeData, PortData>) => GraphModel<NodeData, EdgeData, PortData>;
/**
 * shallow copy to mark edge dirty, in order to trigger a re-render
 *
 * @param edges
 * @param id
 * @param edges
 * @param id
 */
export declare function markEdgeDirty<T>(edges: HashMapBuilder<string, EdgeModel<T>>, id: string): void;
export interface IGetNearestConnectablePortParams<NodeData = unknown, EdgeData = unknown, PortData = unknown> extends Omit<IGetConnectableParams, "model"> {
    clientX: number;
    clientY: number;
    graphConfig: IGraphConfig;
    data: GraphModel<NodeData, EdgeData, PortData>;
    viewport: Required<IViewport>;
}
export declare const getNearestConnectablePort: (params: IGetNearestConnectablePortParams) => ICanvasPort | undefined;
export declare const isConnectable: (graphConfig: IGraphConfig, params: IGetConnectableParams) => boolean | undefined;
/**
 * @param node
 */
export declare function resetNodePortsState<NodeData, PortData>(node: NodeModel<NodeData, PortData>): NodeModel<NodeData, PortData>;
export declare const filterSelectedItems: <NodeData, EdgeData, PortData>(data: GraphModel<NodeData, EdgeData, PortData>) => ICanvasData<NodeData, EdgeData, PortData>;
interface IPortNeighbor {
    nodeId: string;
    portId: string;
}
export declare const getNeighborPorts: <NodeData, EdgeData, PortData>(data: GraphModel<NodeData, EdgeData, PortData>, nodeId: string, portId: string) => IPortNeighbor[];
export declare const unSelectAllEntity: <NodeData, EdgeData, PortData>() => TDataPatch<NodeData, EdgeData, PortData>;
export declare const nodeSelection: <NodeData, EdgeData, PortData>(e: MouseEvent | React.MouseEvent, target: ICanvasNode<NodeData, PortData>) => (data: GraphModel<NodeData, EdgeData, PortData>) => GraphModel<NodeData, EdgeData, PortData>;
export declare const getNodeAutomationId: (node: ICanvasNode) => string;
export declare const getPortAutomationId: (port: ICanvasPort, parentNode: ICanvasNode) => string;
export declare const getNodeUid: (graphId: string, node: ICanvasNode) => string;
export declare const getPortUid: (graphId: string, node: ICanvasNode, port: ICanvasPort) => string;
export declare const getEdgeUid: (graphId: string, edge: ICanvasEdge) => string;
export {};
