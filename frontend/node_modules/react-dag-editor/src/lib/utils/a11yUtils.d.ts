import * as React from "react";
import type { GraphController } from "../controllers/GraphController";
import type { IGetConnectableParams, IGraphConfig } from "../models/config/types";
import type { GraphModel } from "../models/GraphModel";
import type { ICanvasNode } from "../models/node";
import type { NodeModel } from "../models/NodeModel";
import type { ICanvasPort } from "../models/port";
import type { EventChannel } from "./eventChannel";
export interface INextItem {
    node: NodeModel | undefined;
    port: ICanvasPort | undefined;
}
export type TGetNextItemHandler = (data: GraphModel, node: NodeModel, portId?: ICanvasPort) => INextItem;
export declare const findDOMElement: (svg: SVGSVGElement, { node, port }: INextItem) => Element | null;
export declare const focusItem: (svgRef: React.RefObject<SVGSVGElement>, nextItem: INextItem, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const getNextItem: TGetNextItemHandler;
export declare const getPrevItem: TGetNextItemHandler;
export declare const nextConnectablePort: (graphConfig: IGraphConfig, params: Omit<IGetConnectableParams, "model" | "parentNode" | "data">) => TGetNextItemHandler;
export declare const focusNextPort: (ports: readonly ICanvasPort[], node: NodeModel, curPortId: string, svgRef: React.RefObject<SVGSVGElement>, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const focusPrevPort: (ports: readonly ICanvasPort[], node: NodeModel, curPortId: string, svgRef: React.RefObject<SVGSVGElement>, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const getFocusNodeHandler: (compareFn?: ((a: ICanvasNode, b: ICanvasNode) => number) | undefined) => (data: GraphModel, curNodeId: string, svgRef: React.RefObject<SVGSVGElement>, graphController: GraphController, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const focusLeftNode: (data: GraphModel, curNodeId: string, svgRef: React.RefObject<SVGSVGElement>, graphController: GraphController, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const focusRightNode: (data: GraphModel, curNodeId: string, svgRef: React.RefObject<SVGSVGElement>, graphController: GraphController, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const focusDownNode: (data: GraphModel, curNodeId: string, svgRef: React.RefObject<SVGSVGElement>, graphController: GraphController, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const focusUpNode: (data: GraphModel, curNodeId: string, svgRef: React.RefObject<SVGSVGElement>, graphController: GraphController, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
export declare const goToConnectedPort: (data: GraphModel, node: NodeModel, port: ICanvasPort, svgRef: React.RefObject<SVGSVGElement>, evt: React.KeyboardEvent, eventChannel: EventChannel) => void;
/**
 * @param _data graph data
 * @param _node node model
 * @param port port data
 *
 * @returns port arial label
 */
export declare function defaultGetPortAriaLabel(_data: GraphModel, _node: NodeModel, port: ICanvasPort): string | undefined;
/**
 *
 * @param node the node data
 *
 * @returns the string value for the aria label
 */
export declare function defaultGetNodeAriaLabel(node: ICanvasNode): string | undefined;
