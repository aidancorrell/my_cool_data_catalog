import { ICanvasNode } from "./node";
export interface IWithStatus<S extends number> {
    status?: S;
}
export declare const EMPTY_STATUS = 0;
export declare const SELECTED_STATUS = 1;
export declare const ACTIVATED_STATUS = 2;
export declare enum GraphEdgeStatus {
    Default,
    Selected,
    Activated,
    ConnectedToSelected = 4,
    UnconnectedToSelected = 8,
    Editing = 16
}
export declare enum GraphNodeStatus {
    Default,
    Selected,
    Activated,
    Editing = 4,
    ConnectedToSelected = 8,
    UnconnectedToSelected = 16
}
export declare enum GraphPortStatus {
    Default,
    Selected,
    Activated,
    Connecting = 4,
    ConnectingAsTarget = 8
}
export declare const updateStatus: (updater: (state: number | undefined) => number) => <S extends number, T extends IWithStatus<S>>(value: T) => T;
export declare function isActivated<S extends number, T extends IWithStatus<S>>(value: T): boolean;
export declare function isNodeEditing(node: ICanvasNode): boolean;
export declare function isSelected<S extends number, T extends IWithStatus<S>>(value: T): boolean;
export declare function notSelected<S extends number, T extends IWithStatus<S>>(value: T): boolean;
export declare const resetConnectStatus: (mask: number) => (prevStatus: number | undefined) => number;
