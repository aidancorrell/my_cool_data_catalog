import type { $Complete } from "../utils/complete";
import type { IGraphConfig } from "./config/types";
import type { IPoint } from "./geometry";
import type { ICanvasNode } from "./node";
import type { ICanvasPort } from "./port";
import { GraphNodeStatus } from "./status";
export declare class NodeModel<NodeData = unknown, PortData = unknown> implements $Complete<ICanvasNode<NodeData, PortData>> {
    readonly inner: ICanvasNode<NodeData, PortData>;
    readonly portPositionCache: Map<string, IPoint | undefined>;
    readonly prev: string | undefined;
    readonly next: string | undefined;
    get id(): string;
    get status(): GraphNodeStatus | undefined;
    get ports(): ReadonlyArray<ICanvasPort<PortData>> | undefined;
    get ariaLabel(): string | undefined;
    get name(): string | undefined;
    get x(): number;
    get y(): number;
    get automationId(): string | undefined;
    get isInSearchResults(): boolean | undefined;
    get isCurrentSearchResult(): boolean | undefined;
    get data(): Readonly<NodeData> | undefined;
    get height(): number | undefined;
    get width(): number | undefined;
    get layer(): number;
    private constructor();
    static fromJSON<N, P>(node: ICanvasNode<N, P>, prev: string | undefined, next: string | undefined): NodeModel<N, P>;
    getPort(id: string): ICanvasPort<PortData> | undefined;
    link({ prev, next, }: {
        prev?: string | undefined;
        next?: string | undefined;
    }): NodeModel<NodeData, PortData>;
    updateStatus(f: (state: number | undefined) => number): NodeModel<NodeData, PortData>;
    update(f: (curNode: ICanvasNode<NodeData, PortData>) => ICanvasNode<NodeData, PortData>): NodeModel<NodeData, PortData>;
    updateData(f: (data: Readonly<NodeData>) => Readonly<NodeData>): NodeModel<NodeData, PortData>;
    getPortPosition(portId: string, graphConfig: IGraphConfig): IPoint | undefined;
    hasPort(id: string): boolean;
    /**
     * @internal
     */
    updatePositionAndSize(dummy: ICanvasNode): NodeModel<NodeData, PortData>;
    updatePorts(f: (port: ICanvasPort<PortData>, index: number) => ICanvasPort<PortData>): NodeModel<NodeData, PortData>;
    invalidCache(): NodeModel<NodeData, PortData>;
    toJSON(): ICanvasNode<NodeData, PortData>;
}
