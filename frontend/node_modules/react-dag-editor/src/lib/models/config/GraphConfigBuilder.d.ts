import { ICanvasGroup } from "../canvas";
import { ICanvasEdge } from "../edge";
import { ICanvasNode } from "../node";
import { ICanvasPort } from "../port";
import type { IEdgeConfig, IGraphClipboard, IGraphConfig, IGroupConfig, INodeConfig, IPortConfig } from "./types";
export declare class GraphConfigBuilder<NodeData = unknown, EdgeData = unknown, PortData = unknown> {
    private readonly draft;
    private constructor();
    static default(): GraphConfigBuilder;
    static from(graphConfig: IGraphConfig): GraphConfigBuilder;
    registerNode(getConfig: (node: ICanvasNode<NodeData, PortData>) => INodeConfig<ICanvasNode<NodeData, PortData>> | undefined): this;
    registerEdge(getConfig: (edge: ICanvasEdge<EdgeData>) => IEdgeConfig<EdgeData> | undefined): this;
    registerPort(getConfig: (port: ICanvasPort<PortData>) => IPortConfig<NodeData, EdgeData, PortData> | undefined): this;
    registerGroup(getConfig: (group: ICanvasGroup) => IGroupConfig | undefined): this;
    registerClipboard(getClipboard: () => IGraphClipboard<NodeData, EdgeData, PortData>): this;
    build(): IGraphConfig;
}
