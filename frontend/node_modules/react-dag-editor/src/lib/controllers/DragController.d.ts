import { IEventProvider, IGlobalMoveEventTypes } from "../event-provider/types";
import { IPoint } from "../models/geometry";
import { IScheduledCallback } from "../utils/scheduling";
export type TGetPositionFromEvent = (e: MouseEvent) => IPoint;
export interface IOnDragMove<T = MouseEvent> {
    /**
     * clientX after getPositionFromEvent
     */
    clientX: number;
    /**
     * clientY after getPositionFromEvent
     */
    clientY: number;
    dx: number;
    dy: number;
    totalDX: number;
    totalDY: number;
    e: T;
}
export interface IOnDragEnd<T = MouseEvent> {
    totalDX: number;
    totalDY: number;
    e: T;
}
export declare class DragController<T extends MouseEvent = MouseEvent> {
    onMove: (move: IOnDragMove) => void;
    onEnd: (end: IOnDragEnd) => void;
    protected mouseMove: IScheduledCallback<[T]>;
    protected lastEvent: T | null;
    private readonly getPositionFromEvent;
    private startX;
    private startY;
    private prevClientX;
    private prevClientY;
    private readonly eventProvider;
    constructor(eventProvider: IEventProvider<IGlobalMoveEventTypes>, getPositionFromEvent: TGetPositionFromEvent);
    start(e: T): void;
    stop(): void;
    protected getDelta(x: number, y: number): IPoint;
    protected getTotalDelta(e: MouseEvent): IPoint;
    protected doOnMouseMove(e: MouseEvent): void;
    protected doOnMouseUp(e: T): void;
    private readonly onMouseUp;
    private readonly onMouseMove;
}
export declare function defaultGetPositionFromEvent<T extends MouseEvent>(e: T): IPoint;
