import * as BTree from "./b-tree";
import * as Champ from "./champ";
import { IMap, IMapBuilder } from "./common";
/**
 * preserve insertion order
 */
export declare class OrderedMap<K, V> implements IMap<K, V> {
    readonly id: number;
    /**
     * @internal
     */
    readonly hashRoot: Champ.BitmapIndexedNode<K, number>;
    /**
     * @internal
     */
    readonly sortedRoot: BTree.INode<number, [K, V]>;
    private readonly itemId;
    get size(): number;
    /**
     * @param itemId
     * @param hashRoot
     * @param sortedRoot
     * @param itemId
     * @param hashRoot
     * @param sortedRoot
     * @param itemId
     * @param hashRoot
     * @param sortedRoot
     * @internal
     */
    constructor(itemId: number, hashRoot: Champ.BitmapIndexedNode<K, number>, sortedRoot: BTree.INode<number, [K, V]>);
    static empty<TK, TV>(): OrderedMap<TK, TV>;
    static from<TK, TV>(iterable: Iterable<[TK, TV]>): OrderedMap<TK, TV>;
    delete(key: K): OrderedMap<K, V>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): OrderedMap<K, V>;
    update(key: K, updater: (prev: V) => V): OrderedMap<K, V>;
    [Symbol.iterator](): Iterator<[K, V]>;
    clone(): IMap<K, V>;
    entries(): IterableIterator<[K, V]>;
    values(): IterableIterator<V>;
    mutate(): OrderedMapBuilder<K, V>;
    map<T>(f: (value: V, key: K) => T): OrderedMap<K, T>;
    forEach(f: (value: V, key: K) => void): void;
    find(predicate: (value: V) => boolean): V | undefined;
    first(): V | undefined;
    filter(predicate: (value: V, key: K) => boolean): OrderedMap<K, V>;
    private withRoot;
}
export declare class OrderedMapIterator<K, V> implements IterableIterator<[K, V]> {
    private readonly delegate;
    /**
     * @param delegate
     * @internal
     */
    constructor(delegate: BTree.BTreeIterator<number, [K, V]>);
    [Symbol.iterator](): IterableIterator<[K, V]>;
    next(): IteratorResult<[K, V], undefined>;
    clone(): OrderedMapIterator<K, V>;
}
export declare class OrderedMapBuilder<K, V> implements IMapBuilder<K, V> {
    private hashRoot;
    private sortedRoot;
    private readonly id;
    private itemId;
    constructor(itemId: number, hashRoot: Champ.BitmapIndexedNode<K, number>, sortedRoot: BTree.INode<number, [K, V]>);
    static empty<TK, TV>(): OrderedMapBuilder<TK, TV>;
    static from<TK, TV>(iterable: Iterable<[TK, TV]>): OrderedMapBuilder<TK, TV>;
    private static fromArray;
    delete(key: K): OrderedMapBuilder<K, V>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): OrderedMapBuilder<K, V>;
    update(key: K, updater: (prev: V) => V): OrderedMapBuilder<K, V>;
    finish(): OrderedMap<K, V>;
}
