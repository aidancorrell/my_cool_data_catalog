import { INode } from "./b-tree";
import { IMap, IMapBuilder } from "./common";
/**
 * map sorted by key
 */
export declare class SortedMap<K, V> implements IMap<K, V> {
    readonly id: number;
    readonly root: INode<K, V>;
    get size(): number;
    /**
     * @param root
     * @internal
     */
    constructor(root: INode<K, V>);
    static empty<Key, Value>(): SortedMap<Key, Value>;
    static from<Key, Value>(iterable: Iterable<[Key, Value]>): SortedMap<Key, Value>;
    delete(key: K): SortedMap<K, V>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): SortedMap<K, V>;
    update(key: K, updater: (prev: V) => V): SortedMap<K, V>;
    [Symbol.iterator](): Iterator<[K, V]>;
    clone(): IMap<K, V>;
    entries(): IterableIterator<[K, V]>;
    values(): IterableIterator<V>;
    mutate(): SortedMapBuilder<K, V>;
    map<T>(f: (value: V, key: K) => T): SortedMap<K, T>;
    filter(predicate: (value: V, key: K) => boolean): SortedMap<K, V>;
    forEach(f: (value: V, key: K) => void): void;
    find(predicate: (value: V) => boolean): V | undefined;
    private withRoot;
}
export declare class SortedMapBuilder<K, V> implements IMapBuilder<K, V> {
    private readonly id;
    private root;
    /**
     * @param root
     * @internal
     */
    constructor(root: INode<K, V>);
    static empty<Key, Value>(): SortedMapBuilder<Key, Value>;
    static from<Key, Value>(iterable: Iterable<[Key, Value]>): SortedMapBuilder<Key, Value>;
    private static fromArray;
    delete(key: K): SortedMapBuilder<K, V>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): SortedMapBuilder<K, V>;
    update(key: K, updater: (prev: V) => V): SortedMapBuilder<K, V>;
    finish(): SortedMap<K, V>;
}
