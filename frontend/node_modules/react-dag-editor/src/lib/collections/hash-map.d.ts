import { BitmapIndexedNode } from "./champ";
import { IMap, IMapBuilder } from "./common";
export declare class HashMap<K, V> implements IMap<K, V> {
    readonly id: number;
    readonly root: BitmapIndexedNode<K, V>;
    get size(): number;
    /**
     * @param root
     * @internal
     */
    constructor(root: BitmapIndexedNode<K, V>);
    static empty<TK, TV>(): HashMap<TK, TV>;
    static from<TK, TV>(iterable: Iterable<[TK, TV]>): HashMap<TK, TV>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): HashMap<K, V>;
    update(key: K, updater: (prev: V) => V): HashMap<K, V>;
    delete(key: K): HashMap<K, V>;
    clone(): HashMap<K, V>;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    entries(): IterableIterator<[K, V]>;
    values(): IterableIterator<V>;
    mutate(): HashMapBuilder<K, V>;
    map<T>(f: (value: V) => T): HashMap<K, T>;
    filter(predicate: (value: V, key: K) => boolean): HashMap<K, V>;
    forEach(f: (value: V, key: K) => void): void;
    find(predicate: (value: V) => boolean): V | undefined;
    private withRoot;
}
export declare class HashMapBuilder<K, V> implements IMapBuilder<K, V> {
    root: BitmapIndexedNode<K, V>;
    private readonly id;
    /**
     * @param root
     * @internal
     */
    constructor(root: BitmapIndexedNode<K, V>);
    static empty<TK, TV>(): HashMapBuilder<TK, TV>;
    static from<TK, TV>(iterable: Iterable<[TK, TV]>): HashMapBuilder<TK, TV>;
    private static fromArray;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): HashMapBuilder<K, V>;
    update(key: K, updater: (prev: V) => V): HashMapBuilder<K, V>;
    delete(key: K): HashMapBuilder<K, V>;
    finish(): HashMap<K, V>;
}
