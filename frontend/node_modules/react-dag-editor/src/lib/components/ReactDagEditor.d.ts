import * as React from "react";
import { IDispatch } from "../contexts";
import { ISlotsContext } from "../contexts/SlotsContext";
import type { IGraphState } from "../models/state";
/**
 * ReactDagEditor props
 */
export interface IReactDagEditorProps<NodeData = unknown, EdgeData = unknown, PortData = unknown, Action = never> extends ISlotsContext {
    /**
     * Additional css styles to apply to the container element.
     */
    style?: React.CSSProperties;
    /**
     * Additional css class to apply to the container element.
     */
    className?: string;
    state: IGraphState<NodeData, EdgeData, PortData>;
    dispatch: IDispatch<NodeData, EdgeData, PortData, Action>;
    /**
     * Fired when there is invalid data or config. The invalid data or config will be ignored to avoid crashing your app.
     */
    handleWarning?(message: string): void;
    /**
     * Fired when ReactDagEditor catches an error. And the return value will be rendered.
     */
    handleError?(error?: Error, errorInfo?: React.ErrorInfo, children?: React.ReactNode): React.ReactChild;
    /**
     * Fallback to `window` if this is not provided or returns null or undefined
     */
    getGlobalEventTarget?(): Window | HTMLElement | null | undefined;
}
/**
 * ReactDagEditor top level container component
 *
 * @param props
 */
export declare const ReactDagEditor: React.FunctionComponent<React.PropsWithChildren<IReactDagEditorProps>>;
