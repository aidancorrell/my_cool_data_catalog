import { IBoundingBox, IDriverAdapter } from "./DriverAdapter";
export interface IPosition {
    x: number;
    y: number;
}
export interface IConnectTwoNodesConfig {
    sourceNodeName: string;
    sourcePortName: string;
    targetNodeName: string;
    targetPortName: string;
}
export interface IGraphDomObject {
    bbox: IBoundingBox | null;
    textContent: string | null;
    className: string | null;
    innerHTML: string;
    ariaLabel: string | null;
    automationId: string | null;
}
export interface IGraphObject {
    nodes: IGraphDomObject[];
    edges: IGraphDomObject[];
    ports: IGraphDomObject[];
    nodeTooltips: IGraphDomObject[];
    portTooltips: IGraphDomObject[];
}
export declare class TestAPI {
    private readonly adapter;
    constructor(adapter: IDriverAdapter);
    getNodesCount(): Promise<number>;
    getEdgesCount(): Promise<number>;
    addNodeFromItemPanel(options: {
        itemSelector: string;
        x: number;
        y: number;
    }): Promise<void>;
    connectTwoNodes({ sourceNodeName, sourcePortName, targetNodeName, targetPortName, }: IConnectTwoNodesConfig): Promise<void>;
    draggingNode(nodeName: string, toPosition: IPosition): Promise<void>;
    rightClickOnNode(nodeName: string): Promise<void>;
    clickOnNode(nodeName: string): Promise<void>;
    hoverOnNode(nodeName: string): Promise<void>;
    hoverOnPort(nodeName: string, portName: string): Promise<void>;
    hoverOnEdge(edgeId: string): Promise<void>;
    getAutoAlignHintLineCount(): Promise<number>;
    /**
     * select node(s) with ctrl key
     *
     * @param nodeNames node names to be selected
     */
    clickOnNodesWithCtrlKey(nodeNames: string[]): Promise<void>;
    rightClickOnCanvas(x: number, y: number): Promise<void>;
    selectArea(start: IPosition, end: IPosition): Promise<void>;
    connectWithKeyboard(isCancelConnect?: boolean): Promise<void>;
    navigateAroundNodesWithKeyboard(): Promise<void>;
    navigateBackWithKeyboard(): Promise<void>;
    navigateAroundPortsWithKeyboard(): Promise<void>;
    goToConnectedPortWithKeyboard(): Promise<void>;
    deleteNodeWithKeyboard(): Promise<void>;
    panCanvas(from: IPosition, to: IPosition): Promise<void>;
    getElementBoundingBox(cssSelector: string): Promise<IBoundingBox>;
    getCanvasBoundingBox(): Promise<IBoundingBox>;
    getMinimapBoundingBox(): Promise<IBoundingBox>;
    dragOnItem(start: IPosition, end: IPosition): Promise<void>;
    getNodeCentralPosition(nodeName: string): Promise<IPosition>;
    getNodes(): Promise<IGraphDomObject[]>;
    getEdges(): Promise<IGraphDomObject[]>;
    getPorts(): Promise<IGraphDomObject[]>;
    getNodeTooltips(): Promise<IGraphDomObject[]>;
    getPortTooltips(): Promise<IGraphDomObject[]>;
    composeGraph(): Promise<IGraphObject>;
    protected getCentralPosBySelector(cssSelector: string): Promise<IPosition>;
    protected getDomElements(selector: string): Promise<IGraphDomObject[]>;
    protected getCentralPosByBBox(bbox: IBoundingBox | null): IPosition;
    protected getPortCssSelector(nodeName: string, portName: string): string;
    protected getNodeCssSelector(nodeName: string): string;
    protected getEdgeCssSelector(edgeId: string): string;
    protected focusOnCanvasWithKeyboard(): Promise<void>;
}
