{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx\";\nimport React from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineageGraph = ({\n  lineageData\n}) => {\n  const graphConfig = {\n    node: {\n      color: \"lightblue\",\n      size: 400,\n      fontSize: 12\n    },\n    link: {\n      color: \"gray\"\n    },\n    directed: true\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    },\n    children: lineageData ? /*#__PURE__*/_jsxDEV(Graph, {\n      id: \"lineage-graph\",\n      data: lineageData,\n      config: graphConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading lineage graph...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = LineageGraph;\nexport default LineageGraph;\n\n// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;\nvar _c;\n$RefreshReg$(_c, \"LineageGraph\");","map":{"version":3,"names":["React","Graph","jsxDEV","_jsxDEV","LineageGraph","lineageData","graphConfig","node","color","size","fontSize","link","directed","style","height","width","children","id","data","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx"],"sourcesContent":["import React from \"react\";\nimport { Graph } from \"react-d3-graph\";\n\nconst LineageGraph = ({ lineageData }) => {\n    const graphConfig = {\n        node: {\n            color: \"lightblue\",\n            size: 400,\n            fontSize: 12,\n        },\n        link: {\n            color: \"gray\",\n        },\n        directed: true,\n    };\n\n    return (\n        <div style={{ height: \"600px\", width: \"100%\" }}>\n            {lineageData ? (\n                <Graph\n                    id=\"lineage-graph\"\n                    data={lineageData}\n                    config={graphConfig}\n                />\n            ) : (\n                <p>Loading lineage graph...</p>\n            )}\n        </div>\n    );\n};\n\nexport default LineageGraph;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EACtC,MAAMC,WAAW,GAAG;IAChBC,IAAI,EAAE;MACFC,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE,GAAG;MACTC,QAAQ,EAAE;IACd,CAAC;IACDC,IAAI,EAAE;MACFH,KAAK,EAAE;IACX,CAAC;IACDI,QAAQ,EAAE;EACd,CAAC;EAED,oBACIT,OAAA;IAAKU,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,EAC1CX,WAAW,gBACRF,OAAA,CAACF,KAAK;MACFgB,EAAE,EAAC,eAAe;MAClBC,IAAI,EAAEb,WAAY;MAClBc,MAAM,EAAEb;IAAY;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,gBAEFpB,OAAA;MAAAa,QAAA,EAAG;IAAwB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACC,EAAA,GA1BIpB,YAAY;AA4BlB,eAAeA,YAAY;;AAG3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}