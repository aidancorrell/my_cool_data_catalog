{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport LineageGraph from \"./LineageGraph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineagePage = () => {\n  _s();\n  const [lineageData, setLineageData] = useState(null);\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:3000/lineage/model1\") // Replace with actual model ID\n    .then(response => response.json()).then(data => setLineageData(data)).catch(error => console.error(\"Error fetching lineage data:\", error));\n  }, []);\n  if (!lineageData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Lineage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineageGraph, {\n      data: lineageData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(LineagePage, \"ot1czIztuQMe2BhyPWDuh0cVMy4=\");\n_c = LineagePage;\nexport default LineagePage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;\nvar _c;\n$RefreshReg$(_c, \"LineagePage\");","map":{"version":3,"names":["React","useEffect","useState","LineageGraph","jsxDEV","_jsxDEV","LineagePage","_s","lineageData","setLineageData","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LineageGraph from \"./LineageGraph\";\n\nconst LineagePage = () => {\n  const [lineageData, setLineageData] = useState(null);\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:3000/lineage/model1\") // Replace with actual model ID\n      .then((response) => response.json())\n      .then((data) => setLineageData(data))\n      .catch((error) => console.error(\"Error fetching lineage data:\", error));\n  }, []);\n\n  if (!lineageData) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h1>Data Lineage</h1>\n      <LineageGraph data={lineageData} />\n    </div>\n  );\n};\n\nexport default LineagePage;\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAAA,CAC3CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,cAAc,CAACK,IAAI,CAAC,CAAC,CACpCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACR,WAAW,EAAE,oBAAOH,OAAA;IAAAa,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE9C,oBACEjB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBjB,OAAA,CAACF,YAAY;MAACW,IAAI,EAAEN;IAAY;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV,CAAC;AAACf,EAAA,CAlBID,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AAoBjB,eAAeA,WAAW;;AAI1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}