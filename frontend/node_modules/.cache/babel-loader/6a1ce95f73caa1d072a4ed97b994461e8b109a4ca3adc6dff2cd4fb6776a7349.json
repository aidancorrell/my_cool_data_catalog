{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/components/LineageGraph.jsx\";\nimport React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineageGraph = ({\n  data\n}) => {\n  const elements = [\n  // Define nodes\n  ...data.nodes.map(node => ({\n    data: {\n      id: node.id,\n      label: node.id\n    }\n  })),\n  // Define links\n  ...data.links.map(link => ({\n    data: {\n      source: link.source,\n      target: link.target\n    }\n  }))];\n  const layout = {\n    name: 'breadthfirst',\n    // Can be 'grid', 'circle', 'breadthfirst', etc.\n    directed: true,\n    padding: 10\n  };\n  const style = [{\n    selector: 'node',\n    style: {\n      'background-color': '#0074D9',\n      label: 'data(label)',\n      // Display label for nodes\n      color: '#fff',\n      'text-halign': 'center',\n      'text-valign': 'center',\n      'font-size': '12px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      width: 2,\n      'line-color': '#B0BEC5',\n      'target-arrow-color': '#B0BEC5',\n      'target-arrow-shape': 'triangle',\n      'curve-style': 'bezier'\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n    elements: elements,\n    style: {\n      width: '800px',\n      height: '600px'\n    },\n    layout: layout,\n    stylesheet: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_c = LineageGraph;\nexport default LineageGraph;\n\n// // import React from \"react\";\n// import React, { useEffect } from \"react\";\n// import { Graph } from \"react-d3-graph\";\n\n// const LineageGraph = ({ lineageData }) => {\n//     const graphConfig = {\n//         automaticRearrangeAfterDropNode: false,\n//         collapsible: false,\n//         directed: false,\n//         focusAnimationDuration: 0.75,\n//         focusZoom: 1,\n//         freezeAllDragEvents: false,\n//         height: 400,\n//         highlightDegree: 1,\n//         highlightOpacity: 1,\n//         linkHighlightBehavior: false,\n//         maxZoom: 8,\n//         minZoom: 0.1,\n//         nodeHighlightBehavior: true,\n//         panAndZoom: true,\n//         staticGraph: false,\n//         staticGraphWithDragAndDrop: false,\n//         width: 800,\n//         d3: {\n//           alphaTarget: 0.05,\n//           gravity: -100,\n//           linkLength: 100,\n//           linkStrength: 1,\n//           disableLinkForce: false\n//         },\n//         node: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           highlightStrokeColor: \"SAME\",\n//           highlightStrokeWidth: \"SAME\",\n//           labelProperty: \"id\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: true,\n//           size: 200,\n//           strokeColor: \"none\",\n//           strokeWidth: 1.5,\n//           svg: \"\",\n//           symbolType: \"circle\"\n//         },\n//         link: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           labelProperty: \"label\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: false,\n//           semanticStrokeWidth: false,\n//           strokeWidth: 1.5,\n//           markerHeight: 6,\n//           markerWidth: 6,\n//           strokeDasharray: 0,\n//           strokeDashoffset: 0,\n//           strokeLinecap: \"butt\"\n//         }\n//       };\n\n//   useEffect(() => {\n//     // Log lineageData to ensure it has the expected structure\n//     console.log(\"Lineage data:\", lineageData);\n//   }, [lineageData]);\n\n//   // Check if lineageData is in the correct format\n//   if (!lineageData || !lineageData.nodes || !lineageData.links) {\n//     return <div>Error: Invalid lineage data format.</div>;\n//   }\n\n// class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { hasError: false };\n//     }\n\n//     static getDerivedStateFromError(error) {\n//         return { hasError: true };\n//     }\n\n//     componentDidCatch(error, errorInfo) {\n//         console.error(\"Error occurred:\", error, errorInfo);\n//     }\n\n//     render() {\n//         if (this.state.hasError) {\n//             return <p>Something went wrong while rendering the graph.</p>;\n//         }\n//         return this.props.children;\n//     }\n// }\n\n// const handleNodeClick = (nodeId,event) => {\n//     if (!nodeId) {\n//         console.error(\"Invalid node clicked:\", nodeId);\n//         return; // Prevent further actions if nodeId is invalid\n//     }\n//     console.log(\"Node clicked:\", nodeId);\n//     alert(`You clicked on node: ${nodeId}`);  // Example of a simple action\n\n//     console.log(\"Event:\", event); \n\n//     console.log(nodeId || \"Unknown node clicked\");\n\n// };\n\n// const handleGraphClick = (event) => {\n//     if (event.target.tagName === \"svg\") {\n//         console.log(\"Clicked on empty space.\");\n//         return;\n//     }\n\n//     if (!event.target) {\n//         console.log(\"White space clicked.\");\n//         return;\n//     }\n\n//     console.log(\"Graph element clicked:\", event.target);\n//     console.log(\"Graph whitespace clicked.\");\n//     alert(\"Clicked on empty graph area.\");\n// };\n\n// const handleNodeDrag = (nodeId, x, y) => {\n//     console.log(`Node ${nodeId} dragged to position (${x}, ${y})`);\n//     // Ensure the data is being correctly updated\n//     // For example, update the node's position in your lineageData\n// };\n\n// const handleNodeDrop = (nodeId) => {\n//     console.log(`Dropped node: ${nodeId}`);\n// };\n\n// const handleNodeDragEnd = (nodeId) => {\n//     console.log(`Finished dragging node: ${nodeId}`);\n// };\n\n//     return (\n//         <div \n//         style={{\n//             height: \"600px\",\n//             width: \"100%\",\n//             border: \"2px solid black\", // Adds a solid black border\n//             borderRadius: \"8px\", // Optional: Makes the edges rounded\n//             padding: \"10px\", // Optional: Adds spacing inside the border\n//             boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\", // Optional: Adds a shadow for a nice effect\n//         }}\n//         >\n//             {lineageData ? (\n//             <ErrorBoundary>\n//                 <Graph\n//                     id=\"lineage-graph\"\n//                     data={lineageData}\n//                     config={graphConfig}\n//                     onClickNode={handleNodeClick}\n//                     onClickGraph={handleGraphClick}\n//                     onNodeDrag={handleNodeDrag}\n//                     onNodeDrop={handleNodeDrop}\n//                     onNodeDragEnd={handleNodeDragEnd}\n//                 />\n//             </ErrorBoundary>\n//             ) : (\n//                 <p>Loading lineage graph...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LineageGraph;\nvar _c;\n$RefreshReg$(_c, \"LineageGraph\");","map":{"version":3,"names":["React","CytoscapeComponent","jsxDEV","_jsxDEV","LineageGraph","data","elements","nodes","map","node","id","label","links","link","source","target","layout","name","directed","padding","style","selector","color","width","height","stylesheet","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/components/LineageGraph.jsx"],"sourcesContent":["import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nconst LineageGraph = ({ data }) => {\n    const elements = [\n        // Define nodes\n        ...data.nodes.map((node) => ({ data: { id: node.id, label: node.id } })),\n        // Define links\n        ...data.links.map((link) => ({\n            data: { source: link.source, target: link.target },\n        })),\n    ];\n\n    const layout = {\n        name: 'breadthfirst', // Can be 'grid', 'circle', 'breadthfirst', etc.\n        directed: true,\n        padding: 10,\n    };\n\n    const style = [\n        {\n            selector: 'node',\n            style: {\n                'background-color': '#0074D9',\n                label: 'data(label)', // Display label for nodes\n                color: '#fff',\n                'text-halign': 'center',\n                'text-valign': 'center',\n                'font-size': '12px',\n            },\n        },\n        {\n            selector: 'edge',\n            style: {\n                width: 2,\n                'line-color': '#B0BEC5',\n                'target-arrow-color': '#B0BEC5',\n                'target-arrow-shape': 'triangle',\n                'curve-style': 'bezier',\n            },\n        },\n    ];\n\n    return (\n        <CytoscapeComponent\n            elements={elements}\n            style={{ width: '800px', height: '600px' }}\n            layout={layout}\n            stylesheet={style}\n        />\n    );\n};\n\nexport default LineageGraph;\n\n\n// // import React from \"react\";\n// import React, { useEffect } from \"react\";\n// import { Graph } from \"react-d3-graph\";\n\n// const LineageGraph = ({ lineageData }) => {\n//     const graphConfig = {\n//         automaticRearrangeAfterDropNode: false,\n//         collapsible: false,\n//         directed: false,\n//         focusAnimationDuration: 0.75,\n//         focusZoom: 1,\n//         freezeAllDragEvents: false,\n//         height: 400,\n//         highlightDegree: 1,\n//         highlightOpacity: 1,\n//         linkHighlightBehavior: false,\n//         maxZoom: 8,\n//         minZoom: 0.1,\n//         nodeHighlightBehavior: true,\n//         panAndZoom: true,\n//         staticGraph: false,\n//         staticGraphWithDragAndDrop: false,\n//         width: 800,\n//         d3: {\n//           alphaTarget: 0.05,\n//           gravity: -100,\n//           linkLength: 100,\n//           linkStrength: 1,\n//           disableLinkForce: false\n//         },\n//         node: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           highlightStrokeColor: \"SAME\",\n//           highlightStrokeWidth: \"SAME\",\n//           labelProperty: \"id\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: true,\n//           size: 200,\n//           strokeColor: \"none\",\n//           strokeWidth: 1.5,\n//           svg: \"\",\n//           symbolType: \"circle\"\n//         },\n//         link: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           labelProperty: \"label\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: false,\n//           semanticStrokeWidth: false,\n//           strokeWidth: 1.5,\n//           markerHeight: 6,\n//           markerWidth: 6,\n//           strokeDasharray: 0,\n//           strokeDashoffset: 0,\n//           strokeLinecap: \"butt\"\n//         }\n//       };\n\n//   useEffect(() => {\n//     // Log lineageData to ensure it has the expected structure\n//     console.log(\"Lineage data:\", lineageData);\n//   }, [lineageData]);\n\n//   // Check if lineageData is in the correct format\n//   if (!lineageData || !lineageData.nodes || !lineageData.links) {\n//     return <div>Error: Invalid lineage data format.</div>;\n//   }\n\n// class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { hasError: false };\n//     }\n\n//     static getDerivedStateFromError(error) {\n//         return { hasError: true };\n//     }\n\n//     componentDidCatch(error, errorInfo) {\n//         console.error(\"Error occurred:\", error, errorInfo);\n//     }\n\n//     render() {\n//         if (this.state.hasError) {\n//             return <p>Something went wrong while rendering the graph.</p>;\n//         }\n//         return this.props.children;\n//     }\n// }\n\n    \n    \n\n// const handleNodeClick = (nodeId,event) => {\n//     if (!nodeId) {\n//         console.error(\"Invalid node clicked:\", nodeId);\n//         return; // Prevent further actions if nodeId is invalid\n//     }\n//     console.log(\"Node clicked:\", nodeId);\n//     alert(`You clicked on node: ${nodeId}`);  // Example of a simple action\n\n//     console.log(\"Event:\", event); \n\n//     console.log(nodeId || \"Unknown node clicked\");\n\n// };\n\n\n// const handleGraphClick = (event) => {\n//     if (event.target.tagName === \"svg\") {\n//         console.log(\"Clicked on empty space.\");\n//         return;\n//     }\n\n//     if (!event.target) {\n//         console.log(\"White space clicked.\");\n//         return;\n//     }\n\n//     console.log(\"Graph element clicked:\", event.target);\n//     console.log(\"Graph whitespace clicked.\");\n//     alert(\"Clicked on empty graph area.\");\n// };\n\n// const handleNodeDrag = (nodeId, x, y) => {\n//     console.log(`Node ${nodeId} dragged to position (${x}, ${y})`);\n//     // Ensure the data is being correctly updated\n//     // For example, update the node's position in your lineageData\n// };\n\n// const handleNodeDrop = (nodeId) => {\n//     console.log(`Dropped node: ${nodeId}`);\n// };\n\n// const handleNodeDragEnd = (nodeId) => {\n//     console.log(`Finished dragging node: ${nodeId}`);\n// };\n\n\n\n//     return (\n//         <div \n//         style={{\n//             height: \"600px\",\n//             width: \"100%\",\n//             border: \"2px solid black\", // Adds a solid black border\n//             borderRadius: \"8px\", // Optional: Makes the edges rounded\n//             padding: \"10px\", // Optional: Adds spacing inside the border\n//             boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\", // Optional: Adds a shadow for a nice effect\n//         }}\n//         >\n//             {lineageData ? (\n//             <ErrorBoundary>\n//                 <Graph\n//                     id=\"lineage-graph\"\n//                     data={lineageData}\n//                     config={graphConfig}\n//                     onClickNode={handleNodeClick}\n//                     onClickGraph={handleGraphClick}\n//                     onNodeDrag={handleNodeDrag}\n//                     onNodeDrop={handleNodeDrop}\n//                     onNodeDragEnd={handleNodeDragEnd}\n//                 />\n//             </ErrorBoundary>\n//             ) : (\n//                 <p>Loading lineage graph...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LineageGraph;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC/B,MAAMC,QAAQ,GAAG;EACb;EACA,GAAGD,IAAI,CAACE,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;IAAEJ,IAAI,EAAE;MAAEK,EAAE,EAAED,IAAI,CAACC,EAAE;MAAEC,KAAK,EAAEF,IAAI,CAACC;IAAG;EAAE,CAAC,CAAC,CAAC;EACxE;EACA,GAAGL,IAAI,CAACO,KAAK,CAACJ,GAAG,CAAEK,IAAI,KAAM;IACzBR,IAAI,EAAE;MAAES,MAAM,EAAED,IAAI,CAACC,MAAM;MAAEC,MAAM,EAAEF,IAAI,CAACE;IAAO;EACrD,CAAC,CAAC,CAAC,CACN;EAED,MAAMC,MAAM,GAAG;IACXC,IAAI,EAAE,cAAc;IAAE;IACtBC,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE;EACb,CAAC;EAED,MAAMC,KAAK,GAAG,CACV;IACIC,QAAQ,EAAE,MAAM;IAChBD,KAAK,EAAE;MACH,kBAAkB,EAAE,SAAS;MAC7BT,KAAK,EAAE,aAAa;MAAE;MACtBW,KAAK,EAAE,MAAM;MACb,aAAa,EAAE,QAAQ;MACvB,aAAa,EAAE,QAAQ;MACvB,WAAW,EAAE;IACjB;EACJ,CAAC,EACD;IACID,QAAQ,EAAE,MAAM;IAChBD,KAAK,EAAE;MACHG,KAAK,EAAE,CAAC;MACR,YAAY,EAAE,SAAS;MACvB,oBAAoB,EAAE,SAAS;MAC/B,oBAAoB,EAAE,UAAU;MAChC,aAAa,EAAE;IACnB;EACJ,CAAC,CACJ;EAED,oBACIpB,OAAA,CAACF,kBAAkB;IACfK,QAAQ,EAAEA,QAAS;IACnBc,KAAK,EAAE;MAAEG,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAC3CR,MAAM,EAAEA,MAAO;IACfS,UAAU,EAAEL;EAAM;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACC,EAAA,GAhDI1B,YAAY;AAkDlB,eAAeA,YAAY;;AAG3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}