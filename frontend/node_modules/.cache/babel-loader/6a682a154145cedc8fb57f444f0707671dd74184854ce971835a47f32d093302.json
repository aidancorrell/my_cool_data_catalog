{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/components/LineageGraph.jsx\";\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineageGraph = ({\n  lineageData\n}) => {\n  if (!lineageData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading lineage graph...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 16\n    }, this);\n  }\n  const elements = [\n  // Create node elements\n  ...lineageData.nodes.map(node => ({\n    data: {\n      id: node.id,\n      label: node.id\n    }\n  })),\n  // Create edge elements\n  ...lineageData.links.map(link => ({\n    data: {\n      source: link.source,\n      target: link.target\n    }\n  }))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      border: \"1px solid #ccc\"\n    },\n    children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      elements: elements,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      layout: {\n        name: \"breadthfirst\"\n      } // Layout can be customized\n      ,\n      cy: cy => {\n        // Example: Add event listeners for interactivity\n        cy.on(\"tap\", \"node\", evt => {\n          const nodeId = evt.target.id();\n          alert(`Node clicked: ${nodeId}`);\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_c = LineageGraph;\nexport default LineageGraph;\n\n// // import React from \"react\";\n// import React, { useEffect } from \"react\";\n// import { Graph } from \"react-d3-graph\";\n\n// const LineageGraph = ({ lineageData }) => {\n//     const graphConfig = {\n//         automaticRearrangeAfterDropNode: false,\n//         collapsible: false,\n//         directed: false,\n//         focusAnimationDuration: 0.75,\n//         focusZoom: 1,\n//         freezeAllDragEvents: false,\n//         height: 400,\n//         highlightDegree: 1,\n//         highlightOpacity: 1,\n//         linkHighlightBehavior: false,\n//         maxZoom: 8,\n//         minZoom: 0.1,\n//         nodeHighlightBehavior: true,\n//         panAndZoom: true,\n//         staticGraph: false,\n//         staticGraphWithDragAndDrop: false,\n//         width: 800,\n//         d3: {\n//           alphaTarget: 0.05,\n//           gravity: -100,\n//           linkLength: 100,\n//           linkStrength: 1,\n//           disableLinkForce: false\n//         },\n//         node: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           highlightStrokeColor: \"SAME\",\n//           highlightStrokeWidth: \"SAME\",\n//           labelProperty: \"id\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: true,\n//           size: 200,\n//           strokeColor: \"none\",\n//           strokeWidth: 1.5,\n//           svg: \"\",\n//           symbolType: \"circle\"\n//         },\n//         link: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           labelProperty: \"label\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: false,\n//           semanticStrokeWidth: false,\n//           strokeWidth: 1.5,\n//           markerHeight: 6,\n//           markerWidth: 6,\n//           strokeDasharray: 0,\n//           strokeDashoffset: 0,\n//           strokeLinecap: \"butt\"\n//         }\n//       };\n\n//   useEffect(() => {\n//     // Log lineageData to ensure it has the expected structure\n//     console.log(\"Lineage data:\", lineageData);\n//   }, [lineageData]);\n\n//   // Check if lineageData is in the correct format\n//   if (!lineageData || !lineageData.nodes || !lineageData.links) {\n//     return <div>Error: Invalid lineage data format.</div>;\n//   }\n\n// class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { hasError: false };\n//     }\n\n//     static getDerivedStateFromError(error) {\n//         return { hasError: true };\n//     }\n\n//     componentDidCatch(error, errorInfo) {\n//         console.error(\"Error occurred:\", error, errorInfo);\n//     }\n\n//     render() {\n//         if (this.state.hasError) {\n//             return <p>Something went wrong while rendering the graph.</p>;\n//         }\n//         return this.props.children;\n//     }\n// }\n\n// const handleNodeClick = (nodeId,event) => {\n//     if (!nodeId) {\n//         console.error(\"Invalid node clicked:\", nodeId);\n//         return; // Prevent further actions if nodeId is invalid\n//     }\n//     console.log(\"Node clicked:\", nodeId);\n//     alert(`You clicked on node: ${nodeId}`);  // Example of a simple action\n\n//     console.log(\"Event:\", event); \n\n//     console.log(nodeId || \"Unknown node clicked\");\n\n// };\n\n// const handleGraphClick = (event) => {\n//     if (event.target.tagName === \"svg\") {\n//         console.log(\"Clicked on empty space.\");\n//         return;\n//     }\n\n//     if (!event.target) {\n//         console.log(\"White space clicked.\");\n//         return;\n//     }\n\n//     console.log(\"Graph element clicked:\", event.target);\n//     console.log(\"Graph whitespace clicked.\");\n//     alert(\"Clicked on empty graph area.\");\n// };\n\n// const handleNodeDrag = (nodeId, x, y) => {\n//     console.log(`Node ${nodeId} dragged to position (${x}, ${y})`);\n//     // Ensure the data is being correctly updated\n//     // For example, update the node's position in your lineageData\n// };\n\n// const handleNodeDrop = (nodeId) => {\n//     console.log(`Dropped node: ${nodeId}`);\n// };\n\n// const handleNodeDragEnd = (nodeId) => {\n//     console.log(`Finished dragging node: ${nodeId}`);\n// };\n\n//     return (\n//         <div \n//         style={{\n//             height: \"600px\",\n//             width: \"100%\",\n//             border: \"2px solid black\", // Adds a solid black border\n//             borderRadius: \"8px\", // Optional: Makes the edges rounded\n//             padding: \"10px\", // Optional: Adds spacing inside the border\n//             boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\", // Optional: Adds a shadow for a nice effect\n//         }}\n//         >\n//             {lineageData ? (\n//             <ErrorBoundary>\n//                 <Graph\n//                     id=\"lineage-graph\"\n//                     data={lineageData}\n//                     config={graphConfig}\n//                     onClickNode={handleNodeClick}\n//                     onClickGraph={handleGraphClick}\n//                     onNodeDrag={handleNodeDrag}\n//                     onNodeDrop={handleNodeDrop}\n//                     onNodeDragEnd={handleNodeDragEnd}\n//                 />\n//             </ErrorBoundary>\n//             ) : (\n//                 <p>Loading lineage graph...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LineageGraph;\nvar _c;\n$RefreshReg$(_c, \"LineageGraph\");","map":{"version":3,"names":["React","CytoscapeComponent","jsxDEV","_jsxDEV","LineageGraph","lineageData","children","fileName","_jsxFileName","lineNumber","columnNumber","elements","nodes","map","node","data","id","label","links","link","source","target","style","height","border","width","layout","name","cy","on","evt","nodeId","alert","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/components/LineageGraph.jsx"],"sourcesContent":["import React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\n\nconst LineageGraph = ({ lineageData }) => {\n    if (!lineageData) {\n        return <p>Loading lineage graph...</p>;\n    }\n\n    const elements = [\n        // Create node elements\n        ...lineageData.nodes.map((node) => ({\n            data: { id: node.id, label: node.id },\n        })),\n        // Create edge elements\n        ...lineageData.links.map((link) => ({\n            data: { source: link.source, target: link.target },\n        })),\n    ];\n\n    return (\n        <div style={{ height: \"600px\", border: \"1px solid #ccc\" }}>\n            <CytoscapeComponent\n                elements={elements}\n                style={{ width: \"100%\", height: \"100%\" }}\n                layout={{ name: \"breadthfirst\" }} // Layout can be customized\n                cy={(cy) => {\n                    // Example: Add event listeners for interactivity\n                    cy.on(\"tap\", \"node\", (evt) => {\n                        const nodeId = evt.target.id();\n                        alert(`Node clicked: ${nodeId}`);\n                    });\n                }}\n            />\n        </div>\n    );\n};\n\nexport default LineageGraph;\n\n\n\n// // import React from \"react\";\n// import React, { useEffect } from \"react\";\n// import { Graph } from \"react-d3-graph\";\n\n// const LineageGraph = ({ lineageData }) => {\n//     const graphConfig = {\n//         automaticRearrangeAfterDropNode: false,\n//         collapsible: false,\n//         directed: false,\n//         focusAnimationDuration: 0.75,\n//         focusZoom: 1,\n//         freezeAllDragEvents: false,\n//         height: 400,\n//         highlightDegree: 1,\n//         highlightOpacity: 1,\n//         linkHighlightBehavior: false,\n//         maxZoom: 8,\n//         minZoom: 0.1,\n//         nodeHighlightBehavior: true,\n//         panAndZoom: true,\n//         staticGraph: false,\n//         staticGraphWithDragAndDrop: false,\n//         width: 800,\n//         d3: {\n//           alphaTarget: 0.05,\n//           gravity: -100,\n//           linkLength: 100,\n//           linkStrength: 1,\n//           disableLinkForce: false\n//         },\n//         node: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           highlightStrokeColor: \"SAME\",\n//           highlightStrokeWidth: \"SAME\",\n//           labelProperty: \"id\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: true,\n//           size: 200,\n//           strokeColor: \"none\",\n//           strokeWidth: 1.5,\n//           svg: \"\",\n//           symbolType: \"circle\"\n//         },\n//         link: {\n//           color: \"#d3d3d3\",\n//           fontColor: \"black\",\n//           fontSize: 8,\n//           fontWeight: \"normal\",\n//           highlightColor: \"SAME\",\n//           highlightFontSize: 8,\n//           highlightFontWeight: \"normal\",\n//           labelProperty: \"label\",\n//           mouseCursor: \"pointer\",\n//           opacity: 1,\n//           renderLabel: false,\n//           semanticStrokeWidth: false,\n//           strokeWidth: 1.5,\n//           markerHeight: 6,\n//           markerWidth: 6,\n//           strokeDasharray: 0,\n//           strokeDashoffset: 0,\n//           strokeLinecap: \"butt\"\n//         }\n//       };\n\n//   useEffect(() => {\n//     // Log lineageData to ensure it has the expected structure\n//     console.log(\"Lineage data:\", lineageData);\n//   }, [lineageData]);\n\n//   // Check if lineageData is in the correct format\n//   if (!lineageData || !lineageData.nodes || !lineageData.links) {\n//     return <div>Error: Invalid lineage data format.</div>;\n//   }\n\n// class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { hasError: false };\n//     }\n\n//     static getDerivedStateFromError(error) {\n//         return { hasError: true };\n//     }\n\n//     componentDidCatch(error, errorInfo) {\n//         console.error(\"Error occurred:\", error, errorInfo);\n//     }\n\n//     render() {\n//         if (this.state.hasError) {\n//             return <p>Something went wrong while rendering the graph.</p>;\n//         }\n//         return this.props.children;\n//     }\n// }\n\n    \n    \n\n// const handleNodeClick = (nodeId,event) => {\n//     if (!nodeId) {\n//         console.error(\"Invalid node clicked:\", nodeId);\n//         return; // Prevent further actions if nodeId is invalid\n//     }\n//     console.log(\"Node clicked:\", nodeId);\n//     alert(`You clicked on node: ${nodeId}`);  // Example of a simple action\n\n//     console.log(\"Event:\", event); \n\n//     console.log(nodeId || \"Unknown node clicked\");\n\n// };\n\n\n// const handleGraphClick = (event) => {\n//     if (event.target.tagName === \"svg\") {\n//         console.log(\"Clicked on empty space.\");\n//         return;\n//     }\n\n//     if (!event.target) {\n//         console.log(\"White space clicked.\");\n//         return;\n//     }\n\n//     console.log(\"Graph element clicked:\", event.target);\n//     console.log(\"Graph whitespace clicked.\");\n//     alert(\"Clicked on empty graph area.\");\n// };\n\n// const handleNodeDrag = (nodeId, x, y) => {\n//     console.log(`Node ${nodeId} dragged to position (${x}, ${y})`);\n//     // Ensure the data is being correctly updated\n//     // For example, update the node's position in your lineageData\n// };\n\n// const handleNodeDrop = (nodeId) => {\n//     console.log(`Dropped node: ${nodeId}`);\n// };\n\n// const handleNodeDragEnd = (nodeId) => {\n//     console.log(`Finished dragging node: ${nodeId}`);\n// };\n\n\n\n//     return (\n//         <div \n//         style={{\n//             height: \"600px\",\n//             width: \"100%\",\n//             border: \"2px solid black\", // Adds a solid black border\n//             borderRadius: \"8px\", // Optional: Makes the edges rounded\n//             padding: \"10px\", // Optional: Adds spacing inside the border\n//             boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\", // Optional: Adds a shadow for a nice effect\n//         }}\n//         >\n//             {lineageData ? (\n//             <ErrorBoundary>\n//                 <Graph\n//                     id=\"lineage-graph\"\n//                     data={lineageData}\n//                     config={graphConfig}\n//                     onClickNode={handleNodeClick}\n//                     onClickGraph={handleGraphClick}\n//                     onNodeDrag={handleNodeDrag}\n//                     onNodeDrop={handleNodeDrop}\n//                     onNodeDragEnd={handleNodeDragEnd}\n//                 />\n//             </ErrorBoundary>\n//             ) : (\n//                 <p>Loading lineage graph...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default LineageGraph;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EACtC,IAAI,CAACA,WAAW,EAAE;IACd,oBAAOF,OAAA;MAAAG,QAAA,EAAG;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1C;EAEA,MAAMC,QAAQ,GAAG;EACb;EACA,GAAGN,WAAW,CAACO,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;IAChCC,IAAI,EAAE;MAAEC,EAAE,EAAEF,IAAI,CAACE,EAAE;MAAEC,KAAK,EAAEH,IAAI,CAACE;IAAG;EACxC,CAAC,CAAC,CAAC;EACH;EACA,GAAGX,WAAW,CAACa,KAAK,CAACL,GAAG,CAAEM,IAAI,KAAM;IAChCJ,IAAI,EAAE;MAAEK,MAAM,EAAED,IAAI,CAACC,MAAM;MAAEC,MAAM,EAAEF,IAAI,CAACE;IAAO;EACrD,CAAC,CAAC,CAAC,CACN;EAED,oBACIlB,OAAA;IAAKmB,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAiB,CAAE;IAAAlB,QAAA,eACtDH,OAAA,CAACF,kBAAkB;MACfU,QAAQ,EAAEA,QAAS;MACnBW,KAAK,EAAE;QAAEG,KAAK,EAAE,MAAM;QAAEF,MAAM,EAAE;MAAO,CAAE;MACzCG,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAe,CAAE,CAAC;MAAA;MAClCC,EAAE,EAAGA,EAAE,IAAK;QACR;QACAA,EAAE,CAACC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAGC,GAAG,IAAK;UAC1B,MAAMC,MAAM,GAAGD,GAAG,CAACT,MAAM,CAACL,EAAE,CAAC,CAAC;UAC9BgB,KAAK,CAAC,iBAAiBD,MAAM,EAAE,CAAC;QACpC,CAAC,CAAC;MACN;IAAE;MAAAxB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACuB,EAAA,GAhCI7B,YAAY;AAkClB,eAAeA,YAAY;;AAI3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}