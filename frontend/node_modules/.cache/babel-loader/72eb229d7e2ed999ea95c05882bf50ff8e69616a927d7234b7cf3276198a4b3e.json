{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { ReactDagEditor } from \"react-dag-editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineagePage = () => {\n  _s();\n  const [dagData, setDagData] = useState({\n    nodes: [],\n    links: []\n  });\n  useEffect(() => {\n    // Fetch lineage data from your backend\n    fetch('http://127.0.0.1:3000/lineage/model_1').then(response => response.json()).then(data => {\n      // Create nodes from fetched data\n      const nodes = [{\n        id: data.model,\n        label: data.model\n      }, ...data.dependencies.map(dep => ({\n        id: dep,\n        label: dep.charAt(0).toUpperCase() + dep.slice(1)\n      }))];\n\n      // Create links (edges) from fetched data\n      const links = data.dependencies.map(dep => ({\n        source: data.model,\n        // The current model is the source\n        target: dep // Each dependency is a target\n      }));\n      setDagData({\n        nodes,\n        links\n      });\n    }).catch(error => console.error(\"Error fetching lineage data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lineage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactDagEditor, {\n      nodes: dagData.nodes,\n      links: dagData.links,\n      settings: {\n        zoom: true,\n        // Enable zoom functionality\n        pan: true,\n        // Enable panning functionality\n        nodeWidth: 100,\n        nodeHeight: 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(LineagePage, \"vx8eXuD1puUEssN2eZU48w77DyI=\");\n_c = LineagePage;\nexport default LineagePage;\nvar _c;\n$RefreshReg$(_c, \"LineagePage\");","map":{"version":3,"names":["React","useEffect","useState","ReactDagEditor","jsxDEV","_jsxDEV","LineagePage","_s","dagData","setDagData","nodes","links","fetch","then","response","json","data","id","model","label","dependencies","map","dep","charAt","toUpperCase","slice","source","target","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","settings","zoom","pan","nodeWidth","nodeHeight","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { ReactDagEditor } from 'react-dag-editor'; \n\n// const LineagePage = () => {\n//     const [models, setModels] = useState([]);\n//     const [graphData, setGraphData] = useState({\n//         nodes: [],\n//         edges: [],\n//     });\n\n//     useEffect(() => {\n//         // Fetch models from the backend\n//         fetch(\"http://127.0.0.1:3000/models\")\n//             .then((response) => response.json())\n//             .then((data) => setModels(data))\n//             .catch((error) => console.error(\"Error fetching models:\", error));\n//     }, []);\n\n//     useEffect(() => {\n//         // Fetch the lineage data when a model is selected\n//         if (models.length > 0) {\n//             const selectedModel = models[0]; // You can change this logic to select a specific model\n//             fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n//                 .then((response) => response.json())\n//                 .then((data) => {\n//                     // Convert lineage data into a format suitable for react-dag-editor\n//                     const nodes = [\n//                         { id: selectedModel, label: selectedModel },\n//                         ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n//                     ];\n\n//                     const edges = data.dependencies.map((dep) => ({\n//                         from: selectedModel,\n//                         to: dep,\n//                     }));\n\n//                     setGraphData({ nodes, edges });\n//                 })\n//                 .catch((error) => console.error(\"Error fetching lineage:\", error));\n//         }\n//     }, [models]);\n\n//     // Define settings object for DAGEditor\n//   const settings = {\n//     zoom: true,        // Enable zooming\n//     pan: true,         // Enable panning\n//     nodeWidth: 100,    // Width of each node\n//     nodeHeight: 50,    // Height of each node\n//   };\n\n//     return (\n//         <div>\n//             <h1>Lineage</h1>\n//             <ReactDagEditor\n//                 nodes={graphData.nodes}\n//                 edges={graphData.edges}\n//                 // settings={settings}\n//                 onChange={(newData) => setGraphData(newData)}\n//             />\n//         </div>\n//     );\n// };\n\n// export default LineagePage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { ReactDagEditor } from \"react-dag-editor\";\n\nconst LineagePage = () => {\n  const [dagData, setDagData] = useState({\n    nodes: [],\n    links: []\n  });\n\n  useEffect(() => {\n    // Fetch lineage data from your backend\n    fetch('http://127.0.0.1:3000/lineage/model_1')\n      .then((response) => response.json())\n      .then((data) => {\n        // Create nodes from fetched data\n        const nodes = [\n          { id: data.model, label: data.model },\n          ...data.dependencies.map((dep) => ({\n            id: dep,\n            label: dep.charAt(0).toUpperCase() + dep.slice(1),\n          })),\n        ];\n\n        // Create links (edges) from fetched data\n        const links = data.dependencies.map((dep) => ({\n          source: data.model,  // The current model is the source\n          target: dep,         // Each dependency is a target\n        }));\n\n        setDagData({ nodes, links });\n      })\n      .catch((error) => console.error(\"Error fetching lineage data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Lineage</h1>\n      <ReactDagEditor\n        nodes={dagData.nodes}\n        links={dagData.links}\n        settings={{\n          zoom: true,  // Enable zoom functionality\n          pan: true,   // Enable panning functionality\n          nodeWidth: 100,\n          nodeHeight: 50,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default LineagePage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC;IACrCQ,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACd;IACAW,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACA,MAAMN,KAAK,GAAG,CACZ;QAAEO,EAAE,EAAED,IAAI,CAACE,KAAK;QAAEC,KAAK,EAAEH,IAAI,CAACE;MAAM,CAAC,EACrC,GAAGF,IAAI,CAACI,YAAY,CAACC,GAAG,CAAEC,GAAG,KAAM;QACjCL,EAAE,EAAEK,GAAG;QACPH,KAAK,EAAEG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC;MAClD,CAAC,CAAC,CAAC,CACJ;;MAED;MACA,MAAMd,KAAK,GAAGK,IAAI,CAACI,YAAY,CAACC,GAAG,CAAEC,GAAG,KAAM;QAC5CI,MAAM,EAAEV,IAAI,CAACE,KAAK;QAAG;QACrBS,MAAM,EAAEL,GAAG,CAAU;MACvB,CAAC,CAAC,CAAC;MAEHb,UAAU,CAAC;QAAEC,KAAK;QAAEC;MAAM,CAAC,CAAC;IAC9B,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB9B,OAAA,CAACF,cAAc;MACbO,KAAK,EAAEF,OAAO,CAACE,KAAM;MACrBC,KAAK,EAAEH,OAAO,CAACG,KAAM;MACrByB,QAAQ,EAAE;QACRC,IAAI,EAAE,IAAI;QAAG;QACbC,GAAG,EAAE,IAAI;QAAI;QACbC,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE;MACd;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA9CID,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}