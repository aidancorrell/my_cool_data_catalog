{"ast":null,"code":"var _jsxFileName = \"/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ReactDagEditor } from 'react-dag-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineagePage = () => {\n  _s();\n  const [models, setModels] = useState([]);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  useEffect(() => {\n    // Fetch models from the backend\n    fetch(\"http://127.0.0.1:3000/models\").then(response => response.json()).then(data => setModels(data)).catch(error => console.error(\"Error fetching models:\", error));\n  }, []);\n  useEffect(() => {\n    // Fetch the lineage data when a model is selected\n    if (models.length > 0) {\n      const selectedModel = models[0]; // You can change this logic to select a specific model\n      fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`).then(response => response.json()).then(data => {\n        // Convert lineage data into a format suitable for react-dag-editor\n        const nodes = [{\n          id: selectedModel,\n          label: selectedModel\n        }, ...data.dependencies.map(dep => ({\n          id: dep,\n          label: dep\n        }))];\n        const edges = data.dependencies.map(dep => ({\n          from: selectedModel,\n          to: dep\n        }));\n        setGraphData({\n          nodes,\n          edges\n        });\n      }).catch(error => console.error(\"Error fetching lineage:\", error));\n    }\n  }, [models]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lineage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactDagEditor, {\n      nodes: graphData.nodes,\n      edges: graphData.edges,\n      onChange: newData => setGraphData(newData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(LineagePage, \"N7sXZVFmd8HoEAvNkqYkAZwO1Uo=\");\n_c = LineagePage;\nexport default LineagePage;\nvar _c;\n$RefreshReg$(_c, \"LineagePage\");","map":{"version":3,"names":["React","useEffect","useState","ReactDagEditor","jsxDEV","_jsxDEV","LineagePage","_s","models","setModels","graphData","setGraphData","nodes","edges","fetch","then","response","json","data","catch","error","console","length","selectedModel","id","label","dependencies","map","dep","from","to","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","newData","_c","$RefreshReg$"],"sources":["/Users/aidancorrell/repos/data_catalog/frontend/src/pages/LineagePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ReactDagEditor } from 'react-dag-editor'; \n\nconst LineagePage = () => {\n    const [models, setModels] = useState([]);\n    const [graphData, setGraphData] = useState({\n        nodes: [],\n        edges: [],\n    });\n\n    useEffect(() => {\n        // Fetch models from the backend\n        fetch(\"http://127.0.0.1:3000/models\")\n            .then((response) => response.json())\n            .then((data) => setModels(data))\n            .catch((error) => console.error(\"Error fetching models:\", error));\n    }, []);\n\n    useEffect(() => {\n        // Fetch the lineage data when a model is selected\n        if (models.length > 0) {\n            const selectedModel = models[0]; // You can change this logic to select a specific model\n            fetch(`http://127.0.0.1:3000/lineage/${selectedModel}`)\n                .then((response) => response.json())\n                .then((data) => {\n                    // Convert lineage data into a format suitable for react-dag-editor\n                    const nodes = [\n                        { id: selectedModel, label: selectedModel },\n                        ...data.dependencies.map((dep) => ({ id: dep, label: dep })),\n                    ];\n\n                    const edges = data.dependencies.map((dep) => ({\n                        from: selectedModel,\n                        to: dep,\n                    }));\n\n                    setGraphData({ nodes, edges });\n                })\n                .catch((error) => console.error(\"Error fetching lineage:\", error));\n        }\n    }, [models]);\n\n    return (\n        <div>\n            <h1>Lineage</h1>\n            <ReactDagEditor\n                nodes={graphData.nodes}\n                edges={graphData.edges}\n                onChange={(newData) => setGraphData(newData)}\n            />\n        </div>\n    );\n};\n\nexport default LineagePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACvCU,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACX,CAAC,CAAC;EAEFZ,SAAS,CAAC,MAAM;IACZ;IACAa,KAAK,CAAC,8BAA8B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKT,SAAS,CAACS,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EACzE,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,MAAM,CAACc,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,aAAa,GAAGf,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MACjCM,KAAK,CAAC,iCAAiCS,aAAa,EAAE,CAAC,CAClDR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACZ;QACA,MAAMN,KAAK,GAAG,CACV;UAAEY,EAAE,EAAED,aAAa;UAAEE,KAAK,EAAEF;QAAc,CAAC,EAC3C,GAAGL,IAAI,CAACQ,YAAY,CAACC,GAAG,CAAEC,GAAG,KAAM;UAAEJ,EAAE,EAAEI,GAAG;UAAEH,KAAK,EAAEG;QAAI,CAAC,CAAC,CAAC,CAC/D;QAED,MAAMf,KAAK,GAAGK,IAAI,CAACQ,YAAY,CAACC,GAAG,CAAEC,GAAG,KAAM;UAC1CC,IAAI,EAAEN,aAAa;UACnBO,EAAE,EAAEF;QACR,CAAC,CAAC,CAAC;QAEHjB,YAAY,CAAC;UAAEC,KAAK;UAAEC;QAAM,CAAC,CAAC;MAClC,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC;IAC1E;EACJ,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EAEZ,oBACIH,OAAA;IAAA0B,QAAA,gBACI1B,OAAA;MAAA0B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB9B,OAAA,CAACF,cAAc;MACXS,KAAK,EAAEF,SAAS,CAACE,KAAM;MACvBC,KAAK,EAAEH,SAAS,CAACG,KAAM;MACvBuB,QAAQ,EAAGC,OAAO,IAAK1B,YAAY,CAAC0B,OAAO;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAjDID,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAmDjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}